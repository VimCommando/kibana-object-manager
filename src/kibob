#!/bin/bash

# Imports and exports Kibana saved objects from a remote ${kibana_url}
# to a local repository.
#
# Kibana authorization is done through authorization headers. Values are set
# through .env files with environment variables, defauling to `$PWD/.env`:
#     - ${kibana_apikey} for API key authorization, or
#     - ${kibana_username} and ${kibana_password} for basic authorization
#     - If none are provided, the request will use "Authorization: None"
#
# This script depends on a few other command-line utilities:
#     1. `jsrmx` - bundle and unbundle NDJSON: https://github.com/elastic/jsrmx
#     2. `curl` - make HTTP requests to Kibana: https://curl.se/
#     3. `jq` - format, parse, and update JSON: https://stedolan.github.io/jq/
#     4. `grep` - filtering and searching text: https://www.gnu.org/software/grep/
#
# Run `kibob help` for usage instructions.

# ----- Common Functions -----

# Colorized echo statements
function blue()    { echo -e -n "\033[94m${1}\033[39m"; }
function cyan()    { echo -e -n "\033[36m${1}\033[39m"; }
function gray()    { echo -e -n "\033[90m${1}\033[39m"; }
function green()   { echo -e -n "\033[32m${1}\033[39m"; }
function magenta() { echo -e -n "\033[35m${1}\033[39m"; }
function red()     { echo -e -n "\033[31m${1}\033[39m"; }
function white()   { echo -e -n "\033[97m${1}\033[39m"; }
function yellow()  { echo -e -n "\033[33m${1}\033[39m"; }

# Colorized log messages
function timestamp() { echo -n $(date -u +"%Y-%m-%d %H:%M:%S"); }
function log_error() { timestamp; echo " [$(red Error)] ${1}"; }
function log_warn()  { timestamp; echo " [$(yellow Warn)] ${1}"; }
function log_info()  { timestamp; echo " [$(green Info)] ${1}"; }
function log_debug() {
    if [[ $LOG_LEVEL == "debug" ]]; then
        timestamp; echo " [$(blue Debug)] ${1}";
    fi
}

function print_console_test() {
    local LOG_LEVEL="debug"
    log_warn "log warn test message"
    log_error "log error test message"
    log_debug "log debug test message"
    echo "Visit $(blue "https://crates.io/crates/jsrmx")"
    echo "echo $(cyan "cyan") text"
    echo "echo $(gray "gray") text"
    echo "echo $(green "green") text"
    echo "echo $(magenta "magenta") text"
    echo "echo $(red "red") text"
    echo "echo $(white "white") text"
    echo "echo $(yellow "yellow") text"
}

function print_usage() {
    echo "$(white "Usage:") kibob <command> [options] <arguments>"
}

function print_help_main() {
    echo $(white "Description:")
    echo "    Kibana Object Manager: $(green '--{kibob}->') is the Git-flavored side dish to prepare Kibana saved objects for version control!"
    echo
    echo $(white "Usage:")
    echo "    $(green kibob) <command> [options] <arguments>"
    echo
    echo $(white "Commands:")
    echo "    $(green init)    Slice up an $(gray export.ndjson) into objects files and create a $(gray manifest.json)"
    echo "    $(green auth)    Test authorization to a Kibana remote"
    echo "    $(green pull)    Fetch saved objects from a Kibana remote"
    echo "    $(green push)    Update saved objects in a Kibana remote"
    echo "    $(green add)     Add saved objects to the manifest"
    echo "    $(green diff)    Summarize git diff using Azure OpenAI"
    echo "    $(green togo)    Order your Kibana objects to go! (bundle an NDJSON for disitribution)"
    echo "    $(green help)    Get detailed help, use a command name as the <argument>"
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") file to source credentials from (default $(gray ".env"))"
    echo "    -s, --space <ID>       - Kibana space id to use (default $(gray "default"))"
    echo "        --debug            - More verbose logging and retention of temporary files"
}

# Checks if required CLI tools are executable
function verify_dependencies() {
    log_debug "Checking dependencies..."
    if [[ ! $(which jsrmx) ]]; then
        log_error "$(magenta "jsrmx") is not installed or in your \$PATH"
        echo "Visit $(blue "https://crates.io/crates/jsrmx")"
        exit 1
    elif [[ ! $(which jq) ]]; then
        log_error "$(magenta "jq") is not installed or in your \$PATH"
        echo "Visit $(blue "https://jqlang.org")"
        exit 1
    elif [[ ! $(which curl) ]]; then
        log_error "$(magenta "curl") is not installed or in your \$PATH"
        echo "Visit $(blue "https://curl.se")"
        exit 1
    fi
    log_debug "All dependencies passed"
}

# Removes all temporary files
function cleanup() {
    if [[ $cleanup == "true" ]]; then
        log_debug "Removing $(cyan "${#}") temp files"
        while [[ $# > 0 ]]; do
            log_debug "Removing temp file $(gray "${1}")"
            rm -r $1 && shift
        done
    else
        log_info "Keeping temp files $(gray "${*}")"
    fi
}

# Build Kibana authorization header
function set_auth_header() {
    log_debug "Setting Kibana auth header"
    # Exit if Kibana URL was not defined
    if [[ -z $kibana_url ]]; then
        log_error "Kibana URL is not defined"
        exit 1
    fi

    if [[ ! -z $kibana_apikey ]]; then
        log_info "Using apikey authorization to: $(blue "${kibana_url}")"
        export auth_header="Authorization: ApiKey ${kibana_apikey}"
    elif [[ ! -z $kibana_password ]]; then
        log_info "Using basic authorization for ${kibana_username} to: $(blue "${kibana_url}")"
        export auth_header="Authorization: Basic $(echo -n "${kibana_username}:${kibana_password}" | base64)"
    else
        log_info "Using no authorization to: $(blue "${kibana_url}")"
        export auth_header="Authorization: None"
    fi
}

# Reads ${env_file}
# Exports ${kibana_space}, ${kibana_url}, ${kibana_username}, ${kibana_password} and ${kibana_apikey}
function source_env_file() {
    if [[ ! -f $env_file ]]; then
        log_error "Environment file $(gray "${env_file}") does not exist"
        exit 1
    fi

    log_debug "Sourcing $(gray "${env_file}")"
    source "${env_file}"

    # Set default space
    export kibana_space=${kibana_space_arg:-${kibana_space:-default}}
    log_info "Using space $(cyan "${kibana_space}")"
}

# ----- Command: Add -----

function print_help_add () {
    echo
    echo "$(white "Command:") $(green "add") [output_dir]"
    echo "    Add an object to the menu, err, repository. Exports saved objects by ID, including related objects."
    echo "    Adds entries to the $(gray '[output_dir]/manifest.json') and moves objects into $(gray "<output_dir>/objects/*.json")"
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") to source credentials from (default $(gray ".env"))"
    echo "    -o, --objects <IDS>    - Comma-separated list of $(gray '"type=uuid"') objects to export from Kibana"
    echo "    -f, --file <FILE>      - Filename of an $(gray export.ndjson) to merge into existing manifest"
    echo
    echo "$(white "Arguments:")"
    echo "    [output_dir]        - Directory to save the exported objects to. Must contain a $(gray "manifest.json") file. (default $(gray "."))"
    echo
}

# Uses ${objects}, ${export_file} and ${manifest_dir}
# Write ${manifest_patch}
function generate_manifest_patch() {
    if [[ ! -z $objects ]]; then
        # Create a manifest patch from provided object ID list
        log_info "Creating manifest patch by exporting $(cyan ${#objects[@]}) objects"
        # Print full array as debug
        log_debug "Objects to add: ${objects[*]}"

        # Build a JSON object array from the object IDs
        local json_objects=""
        for obj in "${objects[@]}"; do
            local type=${obj//=*/}
            local id=${obj//*=/}
            if [[ -z $json_objects ]]; then
                json_objects="{\"type\":\"${type}\",\"id\":\"${id}\"}"
            else
                json_objects="${json_objects},{\"type\":\"${type}\",\"id\":\"${id}\"}"
            fi
        done

        # Create the manifest patch file
        declare manifest_override="{\"objects\":[${json_objects}],\"excludeExportDetails\":true,\"includeReferencesDeep\":true}"
        export_saved_objects \
        && drop_fields \
        && unbundle_saved_objects \
        && log_info "Exported $(cyan "${export_count}") saved objects from $(green "${env_file}")" \
        || log_info "Saved object export from $(magenta "${env_file}") failed."
    elif [[ ! -z $export_file ]] && [[ -f $export_file ]]; then
        # Create manifest patch from export file
        log_debug "Creating manifest patch from export file $(gray ${export_file})"
        drop_fields \
        && unbundle_saved_objects \
        && log_info "Exported $(cyan "${export_count}") saved objects from $(green "${env_file}")" \
        || log_info "Saved object export from $(magenta "${env_file}") failed."
    fi
    local manifest_file="${manifest_dir}/manifest_patch.json"
    generate_manifest
}

# Uses ${manifest_file} and ${manifest_patch}
function update_manifest() {
    if [[ ! -f $manifest_file ]]; then
        log_error "Manifest file $(gray "${manifest_file}") not found"
        exit 1
    fi

    if [[ ! -f $manifest_patch ]]; then
        log_error "Manifest patch file $(gray "${manifest_patch}") not found"
        exit 1
    fi

    local object_count=$(jq '.objects | length' "${manifest_file}")
    log_info "$(gray "${manifest_file}") contains $(cyan "${object_count}") objects"

    # Use jq to append the new .objects into the existing .objects of ${manifest_file}
    # Then filter to unique values and sort by type and id
    jq -s '.[0].objects += .[1].objects | .[0]' "${manifest_file}" "${manifest_patch}" \
    | jq '.objects |= unique_by(.id) | .objects |= sort_by(.type, .id)' \
    > "${manifest_file}.tmp" \
    && mv "${manifest_file}.tmp" "${manifest_file}"

    local new_object_count=$(jq '.objects | length' "${manifest_file}")
    local added_object_count=$((new_object_count - object_count))
    log_info "Succesfully added $(cyan "${added_object_count}") objects to manifest"
}

function command_add() {
    declare export_file="${export_file:-${manifest_dir}/export.ndjson}"
    declare manifest_file="${manifest_dir}/manifest.json"
    declare manifest_patch="${manifest_dir}/manifest_patch.json"
    declare objects_dir="${manifest_dir}/objects"

    source_env_file \
    && validate_export_directories \
    && generate_manifest_patch \
    && update_manifest \
    && cleanup "${manifest_patch}" "${export_file}"
}

# ----- Command: Auth -----

function print_help_auth () {
    echo
    echo "$(white "Command:") $(green "auth")"
    echo "    Tests the Kibana authorization configuration"
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") file to source credentials from (default $(gray ".env"))"
    echo
}

# Tests authorization to Kibana by getting the default space description
function command_auth() {
    source_env_file
    set_auth_header
    log_info "Testing auth"
    local response=$(curl --silent \
        --header "${auth_header}" \
        --header "elastic-api-version: 2023-10-31" \
        --location "${kibana_url}/api/spaces/space/${kibana_space}"
    )
    log_debug "Response: ${response}"
    local status_code=$(echo ${response} | jq --raw-output '.statusCode')
    if [[ $status_code != "null" ]]; then
        local error=$(echo ${response} | jq --raw-output '.error')
        local message=$(echo ${response} | jq --raw-output '.message')
        log_error "Request to space $(magenta "${kibana_space}") failed: ${status_code} - ${error}"
        log_error "${message}"
        exit 1
    fi

    local jq=$(echo ${response} | jq --raw-output '.name + "=" + (.description | if length > 30 then .[:30] + "..." else . end)')
    local name=${jq//=*/}
    local description=${jq//*=/}
    log_info "Kibana space $(cyan "${name}"): $(gray "${description}")"
}

# ----- Command: Init -----

function print_help_init () {
    echo
    echo "$(white "Command:") $(green "init") [export] [manifest_file]"
    echo "    Initializes a Kibana object repository from an $(gray "export.ndjson")."
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") file to source credentials from (default $(gray ".env"))"
    echo
    echo "$(white "Arguments:")"
    echo "    [export]            - An NDJSON file or directory with an $(gray export.ndjson) to build a manifest file from (default: $(gray "export.ndjson"))"
    echo "    [manifest_file]     - The manifest file to generate (default: $(gray "manifest.json"))"
    echo
}

# Reads ${export_file} and writes ${manifest_file}
function generate_manifest() {
    log_info "Generating manifest from $(gray "${export_file}")"

    # The steps to build the objects array:
    # 1. Extract the type and ID from each object of the export file.
    # 2. Filter out null objects, this drops the export summary line.
    # 3. Format the type and ID as a JSON object.
    # 4. Sort the objects by type, makies diffing easier.
    # 5. Remove the trailing comma from the last object.

    local objects=$(
        jq -c "[.type, (.originId // .id)]" ${export_file} \
        | grep -v null \
        | sed 's/\["\([^"]*\)","\([^"]*\)"\]/{"type":"\1","id":"\2" },/' \
        | sort \
        | sed '$ s/,$//'
    )

    local count=$(echo "${objects}" | wc -l | tr -d '[:space:]')

    # Wrap the objects array into the full JSON body needed for the Kibana saved
    # objects API export and pretty-print to the `manifest.json` file.
    echo "{\"objects\":[${objects}],\"excludeExportDetails\":true,\"includeReferencesDeep\":true}" \
    | jq > ${manifest_file}

    log_info "Created $(gray ${manifest_file}) with $(cyan ${count}) objects."
}

# Writes to existing .gitignore file
function update_gitignore() {
    # Add common files to .gitignore if it exists
    local comment="# Start --{kibob}-> (Kibana Object Manager)"
    local end_comment="# End --{kibob}->"
    if [[ -f ".gitignore" ]] && $(grep -q "${comment}" .gitignore); then
            log_info "Skipping $(gray .gitignore) update"
        elif [[ -d ".git" ]]; then
        log_info "Updating $(gray .gitignore)"
        echo "${comment}" >> .gitignore
        echo ".env*" >> .gitignore
        echo "export.ndjson" >> .gitignore
        echo "import.ndjson" >> .gitignore
        echo ".import/" >> .gitignore
        echo "response.json" >> .gitignore
        echo "manifest_patch.json" >> .gitignore
        echo "${end_comment}" >> .gitignore
    else
        log_warn "No $(gray .git) directory, did you $(green "git init") this directory first?"
    fi
}

function command_init () {
    declare manifest_dir="$(dirname "${manifest_file}")"
    declare objects_dir="${manifest_dir}/objects"

    update_gitignore \
    && generate_manifest \
    && drop_fields \
    && unbundle_saved_objects
}

# ----- Command: Pull -----

function print_help_pull () {
    echo
    echo "$(white "Command:") $(green "pull") [output_dir]"
    echo "    Export and unbundle the Kibana saved objects listed in $(gray '[output_dir]/manifest.json') into $(gray '[output_dir]/objects/*.json') objects."
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") file to source credentials from (default $(gray ".env"))"
    echo
    echo "$(white "Arguments:")"
    echo "    [output_dir]        - Directory to save exported objects to. Must contain a $(gray 'manifest.json') file."
    echo
}

# Checks ${manifest_dir}, ${manifest_file} and ${objects_dir}
function validate_export_directories() {
    if [[ ! -d $manifest_dir ]]; then
        log_error "$(magenta ${manifest_dir}) is not a directory or does not exist"
        exit 1
    fi

    if [[ ! -f $manifest_file ]]; then
        log_error "$(magenta ${manifest_file}) is not a file or does not exist"
        exit 1
    fi

    # Verify objects directory exists
    if [[ ! -d ${objects_dir} ]]; then
        log_info "Creating objects directory $(gray "${objects_dir}")"
        mkdir -p "${objects_dir}"
    fi
}

# Exports Kibana saved objects from ${kibana_url} with ${auth_header} to the ${export_file}
# Reads ${manifest_file} or uses ${manifest_override} if set
function export_saved_objects() {
    local manifest="${manifest_override:-$(cat ${manifest_file})}"
    local count=$(jq '.objects | length' "${manifest_file}")
    log_debug "Exporting $(cyan "${count}") saved objects from $(gray "${kibana_url}") using the $(gray "${kibana_space}") space"
    log_info "Saving to file $(gray "${export_file}")"
    set_auth_header

    curl -X POST "${kibana_url}/s/${kibana_space}/api/saved_objects/_export" \
        --header "${auth_header}" \
        --header "Content-Type: application/json; Elastic-Api-Version=2023-10-31" \
        --header "kbn-xsrf: string" \
        --silent \
        --output "${export_file}" \
        --data "${manifest}"

    # Try reading the status code, it will exist on error responses only
    local status_code=$(jq -r .statusCode "${export_file}")

    if [[ $status_code =~ ^[0-9]+$ ]] && [[ $status_code != 200 ]]; then
        local error=$(jq -r .error "${export_file}")
        local message=$(jq -r .message "${export_file}")
        log_error "Import failed with: ${status_code} - ${error}"
        log_error ${message}
        exit 1
    fi

    export export_count=$(wc -l < "${export_file}" | tr -d '[:space:]')
    log_debug "Exported $(cyan "${export_count}") objects from $(gray ${kibana_url})"
}

# Reads the ${export_file}, writes into the ${objects_dir}
function unbundle_saved_objects() {
    local output_dir="$(dirname "${export_file}")/objects"
    log_info "Unbundling $(gray "${export_file}") to $(gray "${objects_dir}")"
    jsrmx unbundle "${export_file}" "${objects_dir}" \
        --name="attributes.title,attributes.name" \
        --type="type" \
        --unescape="attributes.panelsJSON,attributes.fieldFormatMap,attributes.controlGroupInput.ignoreParentSettingsJSON,attributes.controlGroupInput.panelsJSON,attributes.kibanaSavedObjectMeta.searchSourceJSON,attributes.optionsJSON,attributes.visState,attributes.fieldAttrs"
}

# Drop fields in ${export_file} we don't want tracked in version control
function drop_fields() {
    log_info "Dropping untracked fields"
    jq -c 'del(.created_at, .created_by, .count, .managed, .updated_at, .updated_by, .version)' "${export_file}" > "${export_file}.tmp"
    mv "${export_file}.tmp" "${export_file}"
}

# Uses ${manifest_dir}
function command_pull() {
    local manifest_file="${manifest_dir}/manifest.json"
    local manifest_patch="${manifest_dir}/manifest_patch.json"
    local export_file="${manifest_dir}/export.ndjson"
    local objects_dir="${manifest_dir}/objects"

    source_env_file \
    && validate_export_directories \
    && export_saved_objects \
    && generate_manifest_patch \
    && update_manifest \
    && cleanup "${manifest_patch}" "${export_file}" \
    && log_info "Exported $(cyan "${export_count}") saved objects from $(green "${env_file}")" \
    || log_info "Saved object export from $(magenta "${env_file}") failed."
}

# ----- Command: Push -----

function print_help_push() {
    echo
    echo "$(white "Command:") $(green "push") [input_dir]"
    echo "    Bundle up the $(gray '[input_dir]/objects/*.json') objects to go and deliver them to Kibana!"
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") file to source credentials from (default $(gray ".env"))"
    echo "    -c, --clean <bool>     - Keep the temporary files and directories. (default: $(gray "true"))"
    echo "    -m, --managed <bool>   - Set $(gray '"managed: false"') to allow direct editing in Kibana. (Default: $(gray "true"))"
    echo
    echo "$(white "Arguments:")"
    echo "    [input_dir]           - A directory containing the $(gray manifest.json) file to import. (default: $(gray "."))"
    echo
}

# Checks for ${manifest_file}, ${objects_dir} and ${import_dir}
function validate_import_directories() {
    # Make sure the manifest file exists.
    if [[ ! -f $manifest_file ]]; then
        log_error "Manifest file $(gray ${manifest_file}) not found."
        exit 1
    fi

    # Verify objects directory exists
    if [[ ! -d $objects_dir ]]; then
        log_error "Objects directory $(gray "${objects_dir}") not found."
        exit 1
    fi

    # Create import directory if it doesn't exist
    if [[ ! -d $import_dir ]]; then
        log_info "Creating temporary import directory $(gray "${import_dir}")"
        mkdir -p "${import_dir}"
    fi
}

# Checks ${managed_arg}, reads from ${objects_dir} and writes files to ${import_dir}
function pre_process_objects() {
    local managed=${managed_arg:-${managed:-true}}
    local IFS=$'\n';
    local files=($(ls -A ${manifest_dir}/objects/ | grep -e ".json$"))
    log_info "Setting saved objects as $(cyan managed=${managed})."
    if [[ $managed == "true" ]]; then
        log_debug "Setting files in $(gray "${import_dir}") as $(cyan 'managed: true')"
        for file in "${files[@]}"; do
            jq '. + { "managed": true }' "${objects_dir}/${file}" > "${import_dir}/$(basename "${file}")"
        done
    else
        log_debug "Copying files from $(gray "${objects_dir}") to $(gray "${import_dir}")"
        for file in "${files[@]}"; do
            cp "${objects_dir}/${file}" "${import_dir}/"
        done
    fi
}

# Reads JSON objects from ${import_dir} and writes into the ${import_file} NDJSON bundle.
function bundle_saved_objects() {
    log_info "Bundling saved objects from $(gray ${import_dir}) into $(gray ${import_file})"
    jsrmx bundle "${import_dir}" "${import_file}" \
        --escape="attributes.panelsJSON,attributes.fieldFormatMap,attributes.controlGroupInput.ignoreParentSettingsJSON,attributes.controlGroupInput.panelsJSON,attributes.kibanaSavedObjectMeta.searchSourceJSON,attributes.optionsJSON,attributes.visState,attributes.fieldAttrs"
    export count=$(wc -l < "$import_file" | tr -d '[:space:]')
    log_info "Bundled $(cyan ${count}) saved objects into $(gray ${import_file})"
    # exports: count
}

# POST the bundled ${import_file} into Kibana at ${kibana_url} to the ${kibana_space} space with ${auth_header}.
# Writes the API response to ${response_file}
function import_saved_objects() {
    log_info "Importing saved objects to $(gray ${kibana_url}), using the $(gray ${kibana_space}) space"
    set_auth_header

    curl -X POST "${kibana_url}/s/${kibana_space}/api/saved_objects/_import?overwrite=true" \
        --header "${auth_header}" \
        --header "kbn-xsrf: true" \
        --compressed \
        --silent \
        --form file=@${import_file} \
        | jq > "${response_file}"

    local success=$(jq -r .success "${response_file}")
    if [[ $success != "true" ]]; then
        log_error "Import failed, check $(gray "${response_file}") for details."
        exit 1
    fi
    export success_count=$(jq -r .successCount "${response_file}")
}

# Uses ${manifest_dir}
function command_push() {
    declare manifest_file="${manifest_dir}/manifest.json"
    declare import_dir="${manifest_dir}/.import"
    declare import_file="${manifest_dir}/import.ndjson"
    declare objects_dir="${manifest_dir}/objects"
    declare response_file="${manifest_dir}/response.json"

    source_env_file \
    && validate_import_directories \
    && pre_process_objects \
    && bundle_saved_objects \
    && import_saved_objects \
    && cleanup "${import_dir}" "${import_file}" "${manifest_dir}/response.json"

    log_info "Imported $(cyan ${success_count}) of $(cyan ${count}) saved objects to $(gray ${env_file})"
}

# ----- Command: Togo -----

function print_help_togo() {
    echo
    echo "$(white "Command:") $(green "togo") [input_dir]"
    echo "    Bundle up the $(gray '[input_dir]/objects/*.json') objects into a distributable NDJSON file named $(gray '${input_dir}.ndjson')"
    echo
    echo "$(white "Options:")"
    echo "    -e, --env <NAME|FILE>  - The $(gray ".env.NAME") or $(gray "FILE") to source credentials from (default $(gray ".env"))"
    echo "    -m, --managed <bool>   - Set $(cyan '"managed: false"') to allow direct editing in Kibana. (Default: $(gray "true"))"
    echo
    echo "$(white "Arguments:")"
    echo "    [input_dir]         - Directory containing the objects to bundle (default: $(gray "."))"
    echo
}

# Uses ${manifest_dir} and ${import_file}
function command_togo() {
    declare manifest_file="${manifest_dir}/manifest.json"
    declare import_dir="${manifest_dir}/.import"
    declare objects_dir="${manifest_dir}/objects"

    validate_import_directories \
    && pre_process_objects \
    && bundle_saved_objects \
    && cleanup "${import_dir}"
}

# ----- Command: Diff -----

function print_help_diff() {
    echo
    echo "Command: diff"
    echo "    Summarize the current git diff using Azure OpenAI."
    echo
    echo "Environment Variables required:"
    echo "    AZURE_OPENAI_ENDPOINT"
    echo "    AZURE_OPENAI_DEPLOYMENT_NAME"
    echo "    AZURE_OPENAI_MODEL_NAME"
    echo "    AZURE_OPENAI_API_KEY"
    echo "    AZURE_OPENAI_API_VERSION"
    echo
}


command_diff() {
    source_env_file
    local export_file="export.ndjson"
    local git_diff_output
    local tmp_diff_file
    local chunk_files
    local chunk
    local summary=""
    local tmp_dir

    # Remove export.ndjson from diff and only include objects/
    git_diff_output=$(git diff -- "objects/" ":!$export_file")

    if [[ -z "$git_diff_output" ]]; then
        echo "✅ No changes to summarize."
        return 0
    fi

    echo "🔍 panelsJSON diff detected. Summarizing changes..."

    tmp_dir=$(mktemp -d)
    tmp_diff_file="$tmp_dir/kibob_diff_all.txt"
    echo "$git_diff_output" > "$tmp_diff_file"

    split -l 300 "$tmp_diff_file" "$tmp_dir/kibob_diff_chunk_"

    for chunk_file in "$tmp_dir"/kibob_diff_chunk_*; do
        chunk=$(<"$chunk_file")
        local payload=$(jq -n \
            --arg content "$chunk" \
            --arg deployment "$AZURE_OPENAI_DEPLOYMENT_NAME" \
            --arg model "$AZURE_OPENAI_MODEL_NAME" \
            '{
                "messages": [
                    { "role": "system", "content": "You are summarizing changes made to Kibana saved objects based on a git diff. Your job is to extract and clearly list the high-level changes without mentioning any internal IDs, index pattern names, or technical metadata. Do not explain. Just provide a short, structured list of what changed.

                    Summarize only what is materially different in a clear, user-facing format. Examples of valid output:

                    - A dashboard panel showing cost trends has been removed.
                    - A new options list filter for cloud provider has been added.
                    - The chart showing renewal opportunities has been updated to display new metrics.

                    Avoid:
                    - IDs
                    - Object hashes
                    - File paths
                    - Internal index pattern names
                    - Any boilerplate like “the diff shows” or “the following changes”

                    Just return a clear, minimal changelog.
                    " },
                    { "role": "user", "content": $content }
                ],
                "temperature": 0.4
            }'
        )

        local response=$(curl -s -X POST "$AZURE_OPENAI_ENDPOINT/openai/deployments/$AZURE_OPENAI_DEPLOYMENT_NAME/chat/completions?api-version=$AZURE_OPENAI_API_VERSION" \
            -H "Content-Type: application/json" \
            -H "api-key: $AZURE_OPENAI_API_KEY" \
            -d "$payload")

        local chunk_summary=$(echo "$response" | jq -r '.choices[0].message.content // empty')

        if [[ -n "$chunk_summary" ]]; then
            summary+="$chunk_summary"$'\n'
        fi
    done

    echo "🔍 Summary of changes:"
    echo "$summary"
    echo "✅ diff complete"

    rm -rf "$tmp_dir"
}

# ----- Start Execution -----

verify_dependencies

# Validate and set command
declare command="${1}" && shift
log_debug "Command: ${command}"
if [[ ! $command =~ ^(add|auth|init|push|pull|test|togo|diff|-?-?h(elp)?)?$ ]]; then
    log_error "Invalid command $(magenta "$command")"
    print_help_main
    exit 1
fi

# Defaults
declare env_file=".env"
declare cleanup="true"

# ----- Process command line arguments -----

while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|--clean)
            shift
            if [[ $# -gt 0 ]] && [[ $1 == "true" || $1 == "false" ]]; then
                declare cleanup="${1}"
            else
                log_error "Invalid $(gray --clean) value $(magenta ${1})"
                exit 1
            fi
            shift
        ;;
        -d|--debug)
            declare LOG_LEVEL="debug"
            declare cleanup=false
            log_debug "Turning on debug logging and skipping temp file cleanup"
            shift
        ;;
        -e|--env)
            shift
            if [[ $# > 0 ]]; then
                if [[ -f $1 ]]; then
                    env_file="${1}"
                elif [[ -f ".env.${1}" ]]; then
                    env_file=".env.${1}"
                else
                    log_error "Environment file $(magenta "$1") not found"
                    exit 1
                fi
            else
                log_error "missing environment filename"
                exit 1
            fi
            shift
        ;;
        -f|--file)
            shift
            if [[ $# > 0 ]]; then
                declare export_file=$1
            else
                log_error "missing filename"
                exit 1
            fi
            shift
        ;;
        -h|--help)
            declare help=true
            shift
        ;;
        -m|--managed)
            shift
            if [[ $# > 0 ]] && [[ $1 == "true" || $1 == "false" ]]; then
                declare managed_arg=$1
            else
                log_error "Invalid $(gray --managed) value $(magenta ${1})"
                exit 1
            fi
            shift
        ;;
        -o|--objects)
            shift
            if [[ $# > 0 ]]; then
                # Split comma-separated string into array
                declare -a objects=(${1//,/ })
                log_debug "input ${#objects[@]} objects"
            else
                log_error "Missing $(gray --objects) value"
                exit 1
            fi
            shift
        ;;
        -s|--space)
            shift
            if [[ $# > 0 ]]; then
                declare kibana_space_arg="${1}"
            else
                log_error "Missing $(gray --space) value"
                exit 1
            fi
            shift
        ;;
        *)
            log_debug "Remaining arguments are $(gray "${*}")"
            break
        ;;
    esac
done

# ----- Execute command -----

log_debug "Executing command $(green ${command})"
case $command in
    "add" )
        if [[ $help == true ]]; then
            print_help_add && exit 0
        fi

        if [[ -z $export_file ]] && [[ -z $objects ]]; then
            log_error "$(green add) requires either a $(magenta --file) or $(magenta --objects) argument"
            exit 1
        fi

        declare manifest_dir="${1:-.}"
        log_info "$(green adding) objects to repository"
        command_add \
        && log_info "$(green add) complete"
    ;;
    "auth" )
        if [[ $help == "true" ]]; then
            print_help_auth && exit 0
        fi

        log_info "$(green authorization) check with Kibana"
        command_auth \
        && log_info "$(green auth) complete"
    ;;
    "help" )
        case "${1}" in
            ""     ) print_help_main ;;
            "add"  ) print_help_add  ;;
            "auth" ) print_help_auth ;;
            "init" ) print_help_init ;;
            "push" ) print_help_push ;;
            "pull" ) print_help_pull ;;
            "test" ) print_help_test ;;
            "togo" ) print_help_togo ;;
            "diff" ) print_help_diff;;
            * ) log_warn "Unknown command: $(magenta "${1}")" && print_help_main ;;
        esac
    ;;
    "init" )
        if [[ ${help} == true ]]; then
            print_help_init && exit 0
        fi

        declare export_file="${1:-export.ndjson}"
        if [[ -d $export_file ]]; then
            log_debug "$(gray "${export_file}") was a directory, not file"
            if [[ -f "${export_file}/export.ndjson" ]]; then
                export_file="${export_file}/export.ndjson"
                log_debug "export file updated to $(gray "${export_file}")"
            else
                log_error "Directory $(gray "${export_file}") does not contain an $(gray export.ndjson) file"
                exit 1
            fi
        elif [[ ! -f $export_file ]]; then
            log_error "File $(magenta ${export_file}) not found"
            exit 1
        fi

        declare manifest_file="${2:-$(dirname "${export_file}")/manifest.json}"
        log_info "$(green initializing) local repository"
        command_init \
        && log_info "$(green init) complete"
    ;;
    "push" )
        if [[ $help == "true" ]]; then
            print_help_push && exit 0
        fi

        declare manifest_dir="${1:-.}"
        log_info "$(green pushing) saved objects from $(gray "${manifest_dir}") to Kibana"
        command_push \
        && log_info "$(green push) complete"
    ;;
    "pull" )
        if [[ $help == "true" ]]; then
            print_help_pull && exit 0
        fi
        declare manifest_dir="${1:-.}"
        log_info "$(green pulling) saved objects from Kibana"
        command_pull \
        && log_info "$(green pull) complete"
    ;;
    "test" )
        log_info "$(green testing) console output"
        print_console_test \
        && log_info "$(green test) complete"
    ;;
    "togo" )
        if [[ $help == "true" ]]; then
            print_help_togo && exit 0
        fi
        declare manifest_dir="${1:-.}"
        declare import_file="$(basename ${1:-${PWD}}).ndjson"

        log_info "$(green bundling) saved objects to go!"
        command_togo \
        && log_info "$(green togo) complete"
    ;;
    "diff")
        if [[ $help == "true" ]]; then
            print_help_diff && exit 0
        fi

        log_info "$(green Summurizing) the diff from the previous pull"
        command_diff \
        && log_info "$(green diff) complete"
    ;;
    * )
        if [[ $# == 0 ]]; then
            print_help_main
            exit 1
        else
            log_error "Invalid command $(magenta ${1})"
            print_help_main
            exit 1
        fi
    ;;
esac
